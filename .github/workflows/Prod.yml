name: Production Build

env:
  iteration: ${{github.run_number}}

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - dev
    paths-ignore:
      - 'docs/**'
      - 'README.md'

jobs:
  build_proxy:
    runs-on: ubuntu-latest
    name: .NET restore, build & test

    steps:
    - uses: actions/checkout@v2

    - name: Calculate new version number
        id: versionNum
        run: |
          TAG=$(git describe --tags --abbrev=0)
          arrIN=(${TAG//./ })
          arrSize=${#arrIN[@]}
          if(arrSize == 3)
          {
            newVersion="${TAG}.1"
          }
          if(arrSize == 4)
          {
            b=1
            newBuildNumber=$((${arrIN[3]}+$b))
            newVersion="${arrIN[0]}.${arrIN[1]}.${arrIN[2]}.$newBuildNum
          }
          echo The latest branch version is $newVersion
          echo "versionNumber=$(newVersion)" >> $GITHUB_OUTPUT
    
    - name: Tag commit
      run: |
          git config user.name "GitHub Actions Bot"
          git config user.email ""
          git tag ${{ steps.versionNum.outputs.versionNumber }}
          git push origin ${{ steps.versionNum.outputs.versionNumber }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          6.0.x
    - name: Restore dependencies
      run: dotnet restore ./src/EasyAuthForK8s.Web/EasyAuthForK8s.Web.csproj
    - name: Build
      run: dotnet build ./src/EasyAuthForK8s.Web/EasyAuthForK8s.Web.csproj --no-restore -p:Version=${{ steps.versionNum.outputs.versionNumber }}
    - name: Test
      run: dotnet test ./src/Tests/EasyAuthForK8s.Tests.Web/EasyAuthForK8s.Tests.Web.csproj --no-build --verbosity normal 
  
  check_for_deprecated_APIs:
    needs: build
    name: Check Deprecated K8s APIs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Download Pluto
        uses: FairwindsOps/pluto/github-action@master

      - name: Use pluto
        run: |
          pluto detect-files -d ./charts/easyauth-proxy
          pluto detect-files -d ./
  
  build_and_push_sample_app:
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            sample:
              - 'sample/EasyAuthForK8s.Sample/**'

        # run only if some file in 'sample' folder was changed
      - if: steps.changes.outputs.sample == 'true'
        run: ...
          environment: ${{ env.EnvironmentName }}
          uses: ./.github/workflows/Build-Sample-App.yml
          with:
            Environment: ${{ vars.Environment}}
          secrets: inherit

  push_to_registries:
    needs: [check_for_deprecated_APIs, build_proxy, build_and_push_sample_app]
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/easy-auth-proxy
            easyauthfork8s/easy-auth-proxy
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ needs.build_proxy.outputs.steps.versionNum.versionNumber }}
          labels: ${{ steps.meta.outputs.labels }}  


  run_e2e_test:
    needs: push_to_registries
    runs-on: ubuntu-latest
    environment: prod
    name: Run main.sh script

    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.CAE_AZURE_CREDENTIALS }}
          
    - uses: actions/checkout@v2
    - name: Call the script
      continue-on-error: true
      run: |
        bash main.sh -a "${{ vars.prodPrefix }}-${{ env.iteration }}" -c "${{ vars.prodPrefix }}-${{ env.iteration }}" -r "${{ vars.prodPrefix }}-${{ env.iteration }}" -e ${{ vars.email }} -l ${{ vars.location }} -v "master"

    - name: Delete e2e environment
      if: ${{ vars.DeleteOnFailure == 'true' }} || success()
      run: |
          if [ $(az group exists --name ${{ vars.prodPrefix }}-${{ env.iteration }}) == "true" ]; then
              az group delete -n ${{ vars.prodPrefix }}-${{ env.iteration }} --yes
          fi
          app_id=$(az ad app list --display-name ${{ vars.prodPrefix}}-${{ env.iteration }} --query "[0].appId" -o tsv)
          if [ "$app_id" != "" ]; then
              az ad app delete --id $app_id 
          fi
